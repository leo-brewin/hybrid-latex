<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>My attempt at a Maple language, cloned from the Pascal language.</string>
	<key>fileTypes</key>
	<array>
		<string>mpl</string>
	</array>
	<key>name</key>
	<string>Maple</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\b(?i:(algsubs|apply|Array|CodeGeneration|collect|convert|diff|do|end do|eval|evalf|expand|factor|fclose|for|fopen|fprintf|from|global|if|then|else|elif|end if|local|map|map2|Matrix|mtaylor|proc|end proc|read|save|savelib|series|simplify|solve|sort|subs|unapply|Vector|with))\b</string>
			<key>name</key>
			<string>keyword.control.maple</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.maple</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.maple</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(module|proc))\b\s+(\w+(\.\w+)?)</string>
			<key>name</key>
			<string>meta.function.maple</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.numeric.maple</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.maple</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#).*$\n?</string>
			<key>name</key>
			<string>comment.line.maple</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>null.statement.maple</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(!).*$\n?</string>
			<key>name</key>
			<string>comment.line.ignore.maple</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.maple</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Double quoted strings are an extension and (generally) support C-style escape sequences.</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.maple</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.maple</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.maple</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.maple</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.maple</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.maple</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>''</string>
					<key>name</key>
					<string>constant.character.escape.apostrophe.maple</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.maple</string>
	<key>uuid</key>
	<string>D1B1239F-5194-458E-B5EF-546EE5E110C4</string>
</dict>
</plist>
