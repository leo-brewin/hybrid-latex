<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>cdb</string>
	</array>
	<key>name</key>
	<string>Cadabra</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>(?&lt;!^from\s|^import\s)(\.{3})</string>
			<key>name</key>
			<string>support.type.ellipsis.cadabra</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `"`.</string>
			<key>match</key>
			<string>\b([[:upper:]_][[:upper:][:digit:]_]*)\b(?![\.\(\'\"])</string>
			<key>name</key>
			<string>constant.other.allcaps.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0x\h+)L)</string>
			<key>name</key>
			<string>constant.numeric.integer.hexadecimal.long.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0x\h+))</string>
			<key>name</key>
			<string>constant.numeric.integer.hexadecimal.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0b[01]+)L)</string>
			<key>name</key>
			<string>constant.numeric.integer.binary.long.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0b[01]+))</string>
			<key>name</key>
			<string>constant.numeric.integer.binary.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0[o]?[0-7]+)L)</string>
			<key>name</key>
			<string>constant.numeric.integer.octal.long.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0[o]?[0-7]+))</string>
			<key>name</key>
			<string>constant.numeric.integer.octal.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(((\d+(\.(?=[^[:alpha:]_])\d*)?|(?&lt;=[^[:alnum:]_])\.\d+)(e[\-\+]?\d+)?))J)</string>
			<key>name</key>
			<string>constant.numeric.complex.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^[:alpha:]_])</string>
			<key>name</key>
			<string>constant.numeric.float.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=[^[:alnum:]_])(?i:(\.\d+(e[\-\+]?\d+)?))</string>
			<key>name</key>
			<string>constant.numeric.float.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(\d+e[\-\+]?\d+))</string>
			<key>name</key>
			<string>constant.numeric.float.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:([1-9]+[0-9]*|0)L)</string>
			<key>name</key>
			<string>constant.numeric.integer.decimal.long.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([1-9]+[0-9]*|0)</string>
			<key>name</key>
			<string>constant.numeric.integer.decimal.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(None|True|False|Ellipsis|NotImplemented)\b</string>
			<key>name</key>
			<string>constant.language.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(global|nonlocal)\b</string>
			<key>name</key>
			<string>storage.modifier.$1.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?:(import|from|as))\b</string>
			<key>name</key>
			<string>keyword.control.import.$1.cadabra</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>keyword operators that evaluate to True or False</string>
			<key>match</key>
			<string>\b(and|in|is|not|or)\b</string>
			<key>name</key>
			<string>keyword.operator.logical.cadabra</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>keywords that do not fit into other groups.</string>
			<key>match</key>
			<string>\b(assert|del)\b</string>
			<key>name</key>
			<string>keyword.other.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;&gt;</string>
			<key>name</key>
			<string>invalid.deprecated.operator.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)(apply|buffer|coerce|intern)\s*(?=\()</string>
			<key>name</key>
			<string>invalid.deprecated.function.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;\=|&gt;\=|\=\=|&lt;|&gt;|\!\=</string>
			<key>name</key>
			<string>keyword.operator.comparison.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+\=|-\=|\*\=|/\=|//\=|%\=|&amp;\=|\|\=|\^\=|&gt;&gt;\=|&lt;&lt;\=|\*\*\=|@\=</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|\-|\*|\*\*|/|//|%|&lt;&lt;|&gt;&gt;|&amp;|\||\^|~|(?!^)@</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\=</string>
			<key>name</key>
			<string>keyword.operator.assignment.cadabra</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(class)\s+(?=[[:alpha:]_][[:alnum:]_]*\s*\:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.cadabra</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>entity.name.type.class.cadabra</string>
			<key>end</key>
			<string>\s*(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.class.begin.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.class.old-style.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#entity_name_class</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(class)\s+(?=[[:alpha:]_][[:alnum:]_]*\s*\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))\s*(?:(\:)|(.*$\n?))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.inheritance.end.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.class.begin.cadabra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.missing-section-begin.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.class.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[[:alpha:]_][[:alnum:]_]*)</string>
					<key>contentName</key>
					<string>entity.name.type.class.cadabra</string>
					<key>end</key>
					<string>(?![[:alnum:]_])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#entity_name_class</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.inheritance.begin.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.class.inheritance.cadabra</string>
					<key>end</key>
					<string>(?=\)|:)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\(|,)\s*</string>
							<key>contentName</key>
							<string>entity.other.inherited-class.cadabra</string>
							<key>end</key>
							<string>\s*(?:(,)|(?=\)))</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.inheritance.cadabra</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(class)\s+(?=[[:alpha:]_][[:alnum:]_]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\()|(\s*$\n?|#.*$\n?)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.inheritance.begin.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.missing-inheritance.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.class.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[[:alpha:]_][[:alnum:]_]*)</string>
					<key>contentName</key>
					<string>entity.name.type.class.cadabra</string>
					<key>end</key>
					<string>(?![[:alnum:]_])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#entity_name_function</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\s*(?:(async)\s+)?(def)\s+(?=[[:alpha:]_][[:alnum:]_]*\s*\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\:)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.function.begin.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[[:alpha:]_][[:alnum:]_]*)</string>
					<key>contentName</key>
					<string>entity.name.function.cadabra</string>
					<key>end</key>
					<string>(?![[:alnum:]_])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#entity_name_function</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.function.parameters.cadabra</string>
					<key>end</key>
					<string>(?=\)\s*(?:\:|-\&gt;))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#annotated_arguments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keyword_arguments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.language.cadabra</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.cadabra</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.parameters.cadabra</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(?:(self|cls)|([[:alpha:]_][[:alnum:]_]*))\s*(?:(,)|(?=[\n\)]))</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\))\s*(\-&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.annotation.result.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\:)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\s*(?:(async)\s+)?(def)\s+(?=[[:alpha:]_][[:alnum:]_]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\()|\s*($\n?|#.*$\n?)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.missing-parameters.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[[:alpha:]_][[:alnum:]_]*)</string>
					<key>contentName</key>
					<string>entity.name.function.cadabra</string>
					<key>end</key>
					<string>(?![[:alnum:]_])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#entity_name_function</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>Keywords that delimit flow blocks or alter flow from within a
					   block.

					   This block should be matched *after* meta.function.cadabra to
					   let 'async def' be matched *first*.
					   </string>
			<key>match</key>
			<string>(?x) \b(
						async | await | break | continue | elif | else | except | finally | for |
						if | pass | raise | return | try | while | with |
						(yield(?:\s+from)?)
					)\b
					</string>
			<key>name</key>
			<string>keyword.control.flow.cadabra</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(lambda)(?=\s+|:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.inline.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\:)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.function.begin.cadabra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.missing-section-begin.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.inline.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\s+</string>
					<key>contentName</key>
					<string>meta.function.inline.parameters.cadabra</string>
					<key>end</key>
					<string>(?=\:)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keyword_arguments</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.cadabra</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.parameters.cadabra</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b([[:alpha:]_][[:alnum:]_]*)\s*(?:(,)|(?=[\n\)\:]))</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(?=@\s*[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*\s*\()</string>
			<key>comment</key>
			<string>a decorator may be a function call which returns a decorator.</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.decorator.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=(@)\s*[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*\s*\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.decorator.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>entity.name.function.decorator.cadabra</string>
					<key>end</key>
					<string>(?=\s*\()</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#dotted_name</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.function.decorator.arguments.cadabra</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keyword_arguments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(?=@\s*[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*)</string>
			<key>contentName</key>
			<string>entity.name.function.decorator.cadabra</string>
			<key>end</key>
			<string>(?=\s|$\n?|#)</string>
			<key>name</key>
			<string>meta.function.decorator.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=(@)\s*[[:alpha:]_][[:alnum:]_]*(\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.decorator.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s|$\n?|#)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#dotted_name</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\)|\])\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.begin.cadabra</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.function-call.arguments.cadabra</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#keyword_arguments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)\b(?:(asym|canonicalise|collect_components|collect_factors|
                            collect_terms|combine|complete|decompose_product|
                            display|distribute|drop_weight|einsteinify|
                            eliminate_kronecker|eliminate_metric|epsilon_to_delta|
                            evaluate|expand|expand_delta|expand_diracbar|expand_power|
                            factor_in|factor_out|fierz|flatten_sum|indexsort|
                            integrate_by_parts|join_gamma|keep_terms|keep_weight|
                            lr_tensor|map_sympy|order|product_rule|reduce_delta|rename_dummies|
                            replace_match|rewrite_indices|sort_product|sort_spinors|
                            sort_sum|split_gamma|split_index|substitute|sym|take_match|
                            unwrap|vary|young_project|young_project_product|
                            young_project_tensor))\b</string>
			<key>name</key>
			<string>keyword.other.algorithms.cadabra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)::(?:(Accent|AntiCommuting|AntiSymmetric|Commuting|
                            CommutingAsProduct|CommutingAsSum|Coordinate|
                            DAntiSymmetric|Depends|DependsInherit|Derivative|
                            Diagonal|DifferentialForm|DiracBar|Distributable|
                            EpsilonTensor|ExteriorDerivative|FilledTableau|
                            GammaMatrix|GammaTraceless|ImaginaryI|ImplicitIndex|
                            Indices|Integer|InverseMetric|KroneckerDelta|
                            LaTeXForm|Matrix|Metric|NonCommuting|NumericalFlat|
                            PartialDerivative|RiemannTensor|SatisfiesBianchi|
                            SelfAntiCommuting|SelfCommuting|SelfNonCommuting|
                            SortOrder|Spinor|Symbol|Symmetric|Tableau|
                            TableauSymmetry|Traceless|Weight|WeightInherit|
                            WeylTensor))(\.|\b)</string>
			<key>name</key>
			<string>keyword.other.properties.cadabra</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_types</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_functions_name</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_functions_call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#errors_warnings_exceptions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#magic_function_names</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#magic_function_calls</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#docstrings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#magic_variable_names</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(self|cls)\b\s*(?=(\())</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.begin.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.function-call.arguments.cadabra</string>
					<key>end</key>
					<string>(?=(\)))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.cadabra</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keyword_arguments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#language_variables</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#generic_object_names</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?:\.)?([[:alpha:]_][[:alnum:]_]*)\s*(?=(\())</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.function-call.generic.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.function-call.arguments.cadabra</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keyword_arguments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>Py2 print statement that should only be matched after function calls</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(print)(?=\s|$)</string>
			<key>name</key>
			<string>keyword.other.print.cadabra</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?=[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*\s*\[)</string>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.item-access.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*\s*\[)</string>
					<key>end</key>
					<string>(?=\s*\[)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#dotted_name</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.cadabra</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.item-access.arguments.cadabra</string>
					<key>end</key>
					<string>(?=\])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?=\[)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#dotted_name</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.cadabra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(class)\b</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#line_continuation</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string_quoted_single</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string_quoted_double</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#dotted_name</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>end</key>
			<string>(\))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.begin.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.empty-list.cadabra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.end.cadabra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\[)(\s*(\]))\b</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.begin.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.end.cadabra</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.structure.list.cadabra</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\[|\,)\s*(?![\],])</string>
					<key>contentName</key>
					<string>meta.structure.list.item.cadabra</string>
					<key>end</key>
					<string>\s*(?:(,)|(?=\]))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.list.cadabra</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tuple.begin.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.empty-tuple.cadabra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tuple.end.cadabra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\()(\s*(\)))</string>
			<key>name</key>
			<string>meta.structure.tuple.cadabra</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>annotated_arguments</key>
		<dict>
			<key>begin</key>
			<string>\b([[:alpha:]_][[:alnum:]_]*)\s*(:)|(?=\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.annotation.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\s*(?:(,)|(?=$\n?|[\)\:]))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.cadabra</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#annotated_group</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=</string>
					<key>name</key>
					<string>keyword.operator.assignment.cadabra</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>annotated_group</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters-group.begin.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters-group.end.cadabra</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b([[:alpha:]_][[:alnum:]_]*)\s*(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.annotation.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\s*(?:(,)|(?=$\n?|\)))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.cadabra</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b([[:alpha:]_][[:alnum:]_]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\s*(?:(,)|(?=$\n?|\)))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.cadabra</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>builtin_functions_call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
							(?&lt;!\.)\b(
								__import__ | abs | all | any | ascii | basestring | bin | bool |
								bytearray | bytes | callable | chr | classmethod | cmp | compile |
								complex | delattr | dict | dir | divmod | enumerate | eval | exec |
								execfile | file | filter | float | format | frozenset | getattr |
								globals | hasattr | hash | help | hex | id | input | int |
								isinstance | issubclass | iter | len | list | locals | long | map |
								max | memoryview | min | next | object | oct | open | ord | pow |
								print | property | range | raw_input | reduce | reload | repr |
								reversed | round | set | setattr | slice | sorted | staticmethod |
								str | sum | super | tuple | type | unichr | unicode | vars |
								xrange | zip )
							\b\s*(?=\()
							</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.builtin.call.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function-call.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*\s*\()</string>
							<key>end</key>
							<string>(?=\s*\()</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#dotted_name</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.arguments.begin.cadabra</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.function-call.arguments.cadabra</string>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#keyword_arguments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>builtin_functions_name</key>
		<dict>
			<key>match</key>
			<string>(?x)
					(?&lt;!\.|@)
			        \b(
						__import__ | abs | all | any | ascii | basestring | bin | bool |
						bytearray | bytes | callable | chr | classmethod | cmp | compile |
						complex | delattr | dict | dir | divmod | enumerate | eval | exec |
						execfile | file | filter | float | format | frozenset | getattr |
						globals | hasattr | hash | help | hex | id | input | int |
						isinstance | issubclass | iter | len | list | locals | long | map |
						max | memoryview | min | next | object | oct | open | ord | pow |
						property | range | raw_input | reduce | reload | repr |
						reversed | round | set | setattr | slice | sorted | staticmethod |
						str | sum | super | tuple | type | unichr | unicode | vars |
						xrange | zip)
					\b\s*(?!(\())</string>
			<key>name</key>
			<string>support.function.builtin.name.cadabra</string>
		</dict>
		<key>builtin_types</key>
		<dict>
			<key>comment</key>
			<string>These are from https://docs.cadabra.org/X/library/stdtypes.html
      	  				where X is 2.7 or 3.5.</string>
			<key>match</key>
			<string>(?x)
						(?&lt;!\.)
						\b(
							bool | buffer | bytearray | bytes | complex | dict | float |
							frozenset | int | list | long | memoryview | object | property |
							range | set | slice | str | tuple | type | unicode | xrange)
						\b(?!(\s*\())</string>
			<key>name</key>
			<string>support.type.cadabra</string>
		</dict>
		<key>comment</key>
		<dict>
			<key>begin</key>
			<string>(^[ \t]+)?(?=#)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.comment.leading.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(#$|#[ a-zA-z0-9]+)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.number-sign.cadabra</string>
				</dict>
			</array>
		</dict>
		<key>constant_placeholder</key>
		<dict>
			<key>match</key>
			<string>(?i:(%(\([[:lower:]_]+\))?#?0?\-?[ ]?\+?([0-9]*|\*)(\.([0-9]*|\*))?[hL]?[[:lower:]%])|(\{([!\[\].:\w ]+)?\}))</string>
			<key>name</key>
			<string>constant.other.placeholder.cadabra</string>
		</dict>
		<key>docstrings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(?=[uU]?[rR]?""")</string>
					<key>end</key>
					<string>(?&lt;=""")</string>
					<key>name</key>
					<string>comment.block.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_quoted_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(?=[uU]?[rR]?''')</string>
					<key>end</key>
					<string>(?&lt;=''')</string>
					<key>name</key>
					<string>comment.block.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_quoted_single</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>dotted_name</key>
		<dict>
			<key>begin</key>
			<string>(?=(?:\.(?!\s+import)\s*)?[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*)</string>
			<key>end</key>
			<string>(?![[:alnum:]_\.\s])|(?=(?&lt;!\.)\s+[^.])|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\.)(?=[[:alpha:]_][[:alnum:]_]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.dot.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?![[:alnum:]_])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin_functions_name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#magic_function_names</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#magic_variable_names</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#generic_names</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal_names</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)(?=[[:alpha:]_][[:alnum:]_]*)</string>
					<key>end</key>
					<string>(?![[:alnum:]_])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin_types</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#builtin_functions_name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#builtin_functions_call</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#errors_warnings_exceptions</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#magic_function_names</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#magic_function_calls</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#magic_variable_names</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#language_variables</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#generic_names</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal_names</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>entity_name_class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#generic_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal_names</string>
				</dict>
			</array>
		</dict>
		<key>entity_name_function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin_functions_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#magic_function_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal_names</string>
				</dict>
			</array>
		</dict>
		<key>errors_warnings_exceptions</key>
		<dict>
			<key>match</key>
			<string>(?x)
						\b(
							(
								Arithmetic | Assertion | Attribute | Buffer | BlockingIO |
								BrokenPipe | ChildProcess | (Connection(Aborted | Refused | Reset)?) |
								EOF | Environment | FileExists | FileNotFound | FloatingPoint | IO |
								Import | Indentation | Index | Interrupted | IsADirectory |
								NotADirectory | Permission | ProcessLookup | Timeout | Key | Lookup |
								Memory | Name | NotImplemented | OS | Overflow | Reference | Runtime |
								Recursion | Standard | Syntax | System | Tab | Type | UnboundLocal |
								Unicode(Encode | Decode | Translate)? | Value | VMS | Windows |
								ZeroDivision | ([[:alpha:]_][[:alnum:]_]*))
							?Error
							|
							(
								(Pending)?Deprecation | Bytes | Future | Import | Resource |
								Runtime | Syntax | Unicode | User | [[:alpha:]_][[:alnum:]_]*)
							?Warning
							|
							SystemExit | Stop(Async)?Iteration | NotImplemented |
							KeyboardInterrupt | GeneratorExit
							|
							([[:alpha:]_][[:alnum:]_]*)
							?Exception
						)
						\b</string>
			<key>name</key>
			<string>support.type.exception.cadabra</string>
		</dict>
		<key>escaped_char</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.hex.cadabra</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.linefeed.cadabra</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.return.cadabra</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.tab.cadabra</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.vertical-tab.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.octal.cadabra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.newline.cadabra</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.backslash.cadabra</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.double-quote.cadabra</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.single-quote.cadabra</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.bell.cadabra</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.backspace.cadabra</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.formfeed.cadabra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\\x[\h]{2})|(\\[0-7]{3})|(\\\n)|(\\\\)|(\\\")|(\\')|(\\a)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\v)</string>
		</dict>
		<key>escaped_char_raw_double</key>
		<dict>
			<key>match</key>
			<string>\\"</string>
			<key>name</key>
			<string>constant.character.escape.quote.cadabra</string>
		</dict>
		<key>escaped_char_raw_single</key>
		<dict>
			<key>match</key>
			<string>\\'</string>
			<key>name</key>
			<string>constant.character.escape.quote.cadabra</string>
		</dict>
		<key>escaped_unicode_char</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.unicode.32-bit-hex.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.unicode.16-bit-hex.cadabra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.unicode.name.cadabra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\\U[\h]{8})|(\\u[\h]{4})|(\\N\{[a-zA-Z0-9\, ]+\})</string>
		</dict>
		<key>generic_names</key>
		<dict>
			<key>match</key>
			<string>[[:alpha:]_][[:alnum:]_]*</string>
			<key>name</key>
			<string>meta.identifier.cadabra</string>
		</dict>
		<key>generic_object_names</key>
		<dict>
			<key>match</key>
			<string>(\.\b([[:alpha:]_][[:alnum:]_]*)\b(?!\(|\[)|\b([[:alpha:]_][[:alnum:]_]*)\b\.)</string>
		</dict>
		<key>illegal_names</key>
		<dict>
			<key>comment</key>
			<string>from Lib/keyword.py, in kwlist. `async` and `await` not keywords until Python 3.7 (according to PEP-0492)</string>
			<key>match</key>
			<string>(?x)
				      \b (
				        False | None | True | and | as | assert | break | class | continue | def |
				        del | elif | else | except | exec | finally | for | from | global | if |
				        import | in | is | lambda | nonlocal | not | or | pass | print | raise |
				        return | try | while | with | yield)
				      \b</string>
			<key>name</key>
			<string>invalid.illegal.name.cadabra</string>
		</dict>
		<key>keyword_arguments</key>
		<dict>
			<key>begin</key>
			<string>\b([[:alpha:]_][[:alnum:]_]*)\s*(=)(?!=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.keyword.cadabra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.cadabra</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\s*(?:(,)|(?=[\)\:]))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.cadabra</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>language_variables</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.cadabra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(self|cls)\b(?:\.|\()?</string>
		</dict>
		<key>magic_function_calls</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
								(\.)?
								\b(
									__(?:
									abs | add | aenter | aexit | aiter | and | anext | await | bool |
									bytes | call | ceil | cmp | coerce | complex | contains | copy |
									deepcopy | del | delattr | delete | delitem | delslice | dir | div |
									divmod | enter | eq | exit | float | floor | floordiv | format | ge |
									get | getattr | getattribute | getinitargs | getitem | getnewargs |
									getnewargs_ex | getslice | getstate | gt | hash | hex | iadd | iand |
									idiv | idivmod | ifloordiv | ilshift | imatmul | imod | imul | index |
									init | instancecheck | int | invert | iop | ior | ipow | irshift |
									isub | iter | itruediv | ixor | le | len | length_hint | long |
									lshift | lt | matmul | missing | mod | mul | ne | neg | new | next |
									nonzero | oct | op | or | pos | pow | prepare | radd | rand | rcmp |
									rdiv | rdivmod | reduce | reduce_ex | repr | reversed | rfloordiv |
									rlshift | rmatmul | rmod | rmul | rop | ror | round | rpow | rrshift |
									rshift | rsub | rtruediv | rxor | set | setattr | setitem | setslice |
									setstate | sizeof | str | sub | subclasscheck | truediv | trunc |
									unicode | xor)
								__)
								\s*(?=(\())</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.magic.call.cadabra</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.cadabra</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function-call.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=[[:alpha:]_][[:alnum:]_]*(?:\s*\.\s*[[:alpha:]_][[:alnum:]_]*)*\s*\()</string>
							<key>end</key>
							<string>(?=\s*\()</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#dotted_name</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.arguments.begin.cadabra</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.function-call.arguments.cadabra</string>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#keyword_arguments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>magic_function_names</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.magic.name.cadabra</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>These methods have magic interpretation by python and are generally
					   called indirectly through syntactic constructs. Names are from
					   https://docs.cadabra.org/X/reference/datamodel.html where X is 2.7 and 3.5
					   See also http://www.rafekettler.com/magicmethods.html</string>
			<key>match</key>
			<string>(?x)
						(def|\.)?
						\s*\b(
							__(?:
								abs | add | aenter | aexit | aiter | and | anext | await | bool |
								bytes | call | ceil | cmp | coerce | complex | contains | copy |
								deepcopy | del | delattr | delete | delitem | delslice | dir | div |
								divmod | enter | eq | exit | float | floor | floordiv | format | ge |
								get | getattr | getattribute | getinitargs | getitem | getnewargs |
								getnewargs_ex | getslice | getstate | gt | hash | hex | iadd | iand |
								idiv | idivmod | ifloordiv | ilshift | imatmul | imod | imul | index |
								init | instancecheck | int | invert | iop | ior | ipow | irshift |
								isub | iter | itruediv | ixor | le | len | length_hint | long |
								lshift | lt | matmul | missing | mod | mul | ne | neg | new | next |
								nonzero | oct | op | or | pos | pow | prepare | radd | rand | rcmp |
								rdiv | rdivmod | reduce | reduce_ex | repr | reversed | rfloordiv |
								rlshift | rmatmul | rmod | rmul | rop | ror | round | rpow | rrshift |
								rshift | rsub | rtruediv | rxor | set | setattr | setitem | setslice |
								setstate | sizeof | str | sub | subclasscheck | truediv | trunc |
								unicode | xor)
						__)
						\b</string>
		</dict>
		<key>magic_variable_names</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.variable.magic.cadabra</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>magic attributes which a class/module may have.</string>
			<key>match</key>
			<string>(?x)
						(\.)?
						\b(
							__(?:
							all | annotations | bases | class | closure | code | debug |
							defaults | dict | doc | file | func | globals | kwdefaults |
							members | metaclass | methods | module | mro | name | qualname |
							self | slots | subclasses | version | weakref)
						__) \b</string>
		</dict>
		<key>regular_expressions</key>
		<dict>
			<key>comment</key>
			<string>Changed disabled to 1 to turn off syntax highlighting in “r” strings.</string>
			<key>disabled</key>
			<integer>0</integer>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.regexp.cadabra</string>
				</dict>
			</array>
		</dict>
		<key>string_quoted_double</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([uU]r)(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode-raw string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.unicode-raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU]R)(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode-raw string without regular expression highlighting</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.unicode-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]r)(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes-raw string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.bytes-raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]R)(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes-raw string without regular expression highlighting</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.bytes-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(r)(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted raw string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(R)(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted raw string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU])(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted unicode string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.unicode.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB])(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted bytes string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.bytes.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#constant_placeholder</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#escaped_char_raw_double</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#regular_expressions</string>
								</dict>
							</array>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double-quoted raw string</string>
					<key>match</key>
					<string>([uU]r)(")((?:[^"\\]|\\.)*)(")</string>
					<key>name</key>
					<string>string.quoted.double.single-line.unicode-raw-regex.cadabra</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU]R)(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double-quoted raw string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.unicode-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]r)(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double-quoted raw string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.bytes-raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]R)(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double-quoted raw string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.bytes-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#constant_placeholder</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#escaped_char_raw_double</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#regular_expressions</string>
								</dict>
							</array>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double-quoted raw string</string>
					<key>match</key>
					<string>(r)(")((?:[^"\\]|\\.)*)(")</string>
					<key>name</key>
					<string>string.quoted.double.single-line.raw-regex.cadabra</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(R)(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double-quoted raw string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_double</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU])(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted unicode string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.unicode.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB])(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted bytes string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.bytes.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(""")(?=\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.sql.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.sql</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(")(?=\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.sql.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#constant_placeholder</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#escaped_unicode_char</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#escaped_char</string>
										</dict>
										<dict>
											<key>include</key>
											<string>source.sql</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>match</key>
							<string>(\G|^)([^"\\]|\\.)*(?="|$)</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted string</string>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.block.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>double quoted string</string>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_quoted_single</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([uU]r)(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode-raw string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.unicode-raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU]R)(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode-raw string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.unicode-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]r)(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes-raw string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.bytes-raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]R)(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes-raw string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.bytes-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(r)(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted raw string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(R)(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted raw string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU])(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.unicode.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB])(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.bytes.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#constant_placeholder</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#escaped_char_raw_single</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#regular_expressions</string>
								</dict>
							</array>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted raw string</string>
					<key>match</key>
					<string>([uU]r)(')((?:[^'\\]|\\.)*)(')</string>
					<key>name</key>
					<string>string.quoted.single.single-line.unicode-raw-regex.cadabra</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU]R)(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode-raw string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.unicode-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]r)(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes-raw string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.bytes-raw-regex.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regular_expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB]R)(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes-raw string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.bytes-raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#constant_placeholder</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#escaped_char_raw_single</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#regular_expressions</string>
								</dict>
							</array>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(r)(')((?:[^'\\]|\\.)*)(')</string>
					<key>name</key>
					<string>string.quoted.single.single-line.raw-regex.cadabra</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(R)(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted raw string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.raw.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char_raw_single</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([uU])(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted unicode string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.unicode.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([bB])(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted bytes string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.bytes.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(''')(?=\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.sql</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(')(?=\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#constant_placeholder</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#escaped_unicode_char</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#escaped_char</string>
										</dict>
										<dict>
											<key>include</key>
											<string>source.sql</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>match</key>
							<string>(\G|^)([^'\\]|\\.)*(?='|$)</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(''')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted string</string>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.block.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.cadabra</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>single quoted string</string>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.cadabra</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.cadabra</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.cadabra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#constant_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_unicode_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_quoted_double</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_quoted_single</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.cadabra</string>
	<key>uuid</key>
	<string>480868FC-5043-4060-88CB-667759C8F917</string>
</dict>
</plist>
