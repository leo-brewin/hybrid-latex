<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18
require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
data = STDIN.read
location = [[ENV['TM_LINE_NUMBER'].to_i,ENV['TM_LINE_INDEX'].to_i]]
# location = [[8,10],[6,10],[5,4]]
class String
  def split_after_row(row)
    lines = self.scan(/.*\n?/)
    before = lines[0..row-1].join("")
    after = lines[row..-1].join("")
    return [before,after]
  end
  def fix_back
    stack = []
    before_lines = self.scan(/.*\n?/)
    processed = []
    until before_lines.empty?
      line = before_lines.pop
      case line
      when /^(.*\\begin\{)([^\}\*]*)(\*?)(\}.*\n?)$/
        if stack.empty? then
          replace = $1 + $2 + ($3=="" ? "*" : "") + $4
          return [:begin, before_lines.join("") + replace + processed.reverse.join("")]
        else
          stack.pop
          processed &lt;&lt; line
        end
      when /^(.*\\end\{)([^\}\*]*)(\*?)(\}.*\n?)$/
        stack.push ""
        processed &lt;&lt; line
      when /^(.*\\(?:chapter|part|(?:sub){0,2}section|(?:sub)?paragraph))(\*?)(\{.*\n?)$/
        replace = $1 + ($2=="" ? "*" : "") + $3
        return [:section, before_lines.join("") + replace + processed.reverse.join("")]
      else
        processed &lt;&lt; line
      end
    end
    raise "Unexpected!"
  end
  def fix_forward
    stack = []
    after_lines = self.scan(/.*\n?/)
    processed = []
    until after_lines.empty?
      line = after_lines.shift
      case line
      when /^(.*\\begin\{)([^\}\*]*)(\*?)(\}.*\n?)$/
        stack.push ""
        processed &lt;&lt; line
      when /^(.*\\end\{)([^\}\*]*)(\*?)(\}.*\n?)$/
        if stack.empty? then
          replace = $1 + $2 + ($3=="" ? "*" : "") + $4
          return [:end, processed.join("") + replace + after_lines.join("")]
        else
          stack.pop
          processed &lt;&lt; line
        end
      else
        processed &lt;&lt; line
      end
    end
    raise "Unexpected!"
  end
end

location.each do |row,col|
  before, after = data.split_after_row(row)
  status, before = before.fix_back
  unless status == :section then
    status, after = after.fix_forward
  end
  if col == 0 then
    before_lines = before.scan(/.*\n?/)
    before_lines.pop
    after = before_lines.pop + after
    before = before_lines.join("")
  else
    before_lines = before.scan(/.*\n?/)
	before_lines.pop
    line = before_lines.pop
    before = before_lines.push(line[0..col-1]).join("")
   after = line[col..-1] + after
  end
  print e_sn(before) + "\$0" + e_sn(after)
end
</string>
	<key>fallbackInput</key>
	<string>document</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^*</string>
	<key>name</key>
	<string>Toggle Starred</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.tex.latex</string>
	<key>uuid</key>
	<string>37C520F9-A379-4BBC-AF62-22F7C0B63955</string>
</dict>
</plist>
